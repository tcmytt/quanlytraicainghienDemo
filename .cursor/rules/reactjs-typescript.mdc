---
description: use when generation code React TypeScript
alwaysApply: false
---

# Claude Cursor Rules for React TypeScript

## Key Principles

- Write concise, technical responses with accurate TypeScript examples
- Use functional, declarative programming; avoid classes
- Prefer iteration and modularization over duplication
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`)
- Use lowercase with dashes for directories (e.g., `components/auth-wizard`)
- Favor named exports for components
- Use Receive an Object, Return an Object (RORO) pattern

## JavaScript/TypeScript Guidelines

- Use `function` keyword for pure functions, omit semicolons
- Use TypeScript for all code, prefer `interface` over `type`, avoid `enum`, use maps
- File structure:
  - Exported component
  - Subcomponents
  - Helper functions
  - Static content
  - Types
- Avoid unnecessary curly braces in conditionals
- Use concise one-line syntax for simple conditionals (e.g., `if (condition) doSomething()`)
- Prioritize error handling and edge cases:
  - Handle errors/edge cases at function start
  - Use early returns for error conditions to avoid nested `if` statements
  - Place happy path last for readability
  - Avoid unnecessary `else`; use `if`-return pattern
  - Use guard clauses for preconditions/invalid states
  - Implement proper error logging and user-friendly messages
  - Consider custom error types or error factories for consistency

## Example

```tsx
// components/user-profile/user-profile.tsx

interface User {
  id: string
  name: string
  email: string
}

interface UserProfileProps {
  userId: string
  onError: (message: string) => void
}

interface UserProfileResult {
  user: User | null
  isLoading: boolean
  error: string | null
}

export function UserProfile({ userId, onError }: UserProfileProps): UserProfileResult {
  if (!userId) {
    onError("User ID is required")
    return { user: null, isLoading: false, error: "User ID is required" }
  }

  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  async function fetchUser() {
    try {
      const response = await fetch(`/api/users/${userId}`)
      if (!response.ok) throw new Error("Failed to fetch user")
      const data = await response.json()
      setUser(data)
    } catch (err) {
      const message = "Error fetching user data"
      setError(message)
      onError(message)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchUser()
  }, [userId])

  return { user, isLoading, error }
}
```